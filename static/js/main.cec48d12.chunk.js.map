{"version":3,"sources":["Components/Player.module.scss","pause.svg","play.svg","Components/songs/Brianstorm.mp3","Components/songs/TeddyPicker.mp3","prev.svg","next.svg","git.svg","Components/Pause.js","Components/Player.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","props","isPaused","audio","pause","play","onClick","className","classes","btn","Paused","main","src","svg_play","alt","svg_pause","Player","state","song_names","songs_durations","songIndex","autoRepeat","songs","song1","song2","Audio","currentTime","onended","setState","ontimeupdate","console","log","songIndexOld","this","isPausedOld","Gradient","Btns","prev","svg_prev","Pause","setPause","next","svg_next","SongName","React","Component","App","href","github_logo","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"gFACAA,EAAOC,QAAU,CAAC,OAAS,uBAAuB,SAAW,yBAAyB,SAAW,yBAAyB,KAAO,qBAAqB,IAAM,oBAAoB,KAAO,qBAAqB,KAAO,qBAAqB,KAAO,uB,oBCD/OD,EAAOC,QAAU,IAA0B,mC,gBCA3CD,EAAOC,QAAU,IAA0B,kC,gBCA3CD,EAAOC,QAAU,IAA0B,wC,gBCA3CD,EAAOC,QAAU,IAA0B,yC,gBCA3CD,EAAOC,QAAU,IAA0B,kC,gBCA3CD,EAAOC,QAAU,IAA0B,kC,gBCA3CD,EAAOC,QAAU,IAA0B,iC,+OCK5B,WAAAC,GAOd,OANIA,EAAMC,SACTD,EAAME,MAAMC,QAEZH,EAAME,MAAME,OAIZ,yBACCC,QAASL,EAAMK,QACfC,UAAWC,IAAQC,IAAM,IAAMD,IAAQE,OAAS,IAAMF,IAAQG,MAG7DV,EAAMC,SACL,yBAAKU,IAAKC,IAAUC,IAAI,MACxB,yBAAKF,IAAKG,IAAWD,IAAI,Q,kECoFfE,E,kDAxFd,WAAYf,GAAQ,IAAD,8BAClB,cAAMA,IARPgB,MAAQ,CACPC,WAAY,CAAC,aAAc,gBAC3BC,gBAAiB,CAAC,QAAQ,SAC1BC,UAAW,EACXC,YAAY,EACZnB,UAAU,GAIV,EAAKoB,MAAQ,CAACC,IAAOC,KAErB,EAAKrB,MAAQ,IAAIsB,MAAM,EAAKH,MAAM,EAAKL,MAAMG,YAE7C,EAAKjB,MAAMuB,YAAc,EAEzB,EAAKvB,MAAMwB,QAAU,WACpB,EAAKxB,MAAMuB,YAAc,EAErB,EAAKT,MAAMI,WACd,EAAKlB,MAAME,OAEX,EAAKuB,SAAS,CAAC1B,UAAU,KAO3B,EAAKC,MAAM0B,aAAe,aArBR,E,iEAgClBC,QAAQC,IAAI,S,0CAGZD,QAAQC,IAAI,W,+BAQJC,GACRC,KAAKL,SAAS,CAACR,UAAWY,Q,+BAElBA,GACRC,KAAKL,SAAS,CAACR,UAAWY,Q,+BAElBE,GACRD,KAAKL,SAAS,CAAC1B,UAAWgC,M,+BAKlB,IAAD,OACP,OACC,6BACC,yBAAK3B,UAAWC,IAAQQ,SACxB,yBAAKT,UAAWC,IAAQ2B,UACvB,yBAAK5B,UAAWC,IAAQ4B,MACvB,yBAAK7B,UAAWC,IAAQC,IAAM,IAAMD,IAAQ6B,MAC3C,yBAAKzB,IAAK0B,IAAUxB,IAAI,OAIzB,kBAACyB,EAAD,CAECjC,QAAS,kBAAI,EAAKkC,SAAS,EAAKvB,MAAMf,WACtCA,SAAU+B,KAAKhB,MAAMf,SACrBC,MAAO8B,KAAK9B,MACZI,UAAWC,IAAQC,IAAM,IAAMD,IAAQE,OAAS,IAAMF,IAAQG,OAI/D,yBAAKJ,UAAWC,IAAQC,IAAM,IAAMD,IAAQiC,MAC3C,yBAAK7B,IAAK8B,IAAU5B,IAAI,SAI3B,yBAAKP,UAAWC,IAAQmC,UACtBV,KAAKhB,MAAMC,WAAWe,KAAKhB,MAAMG,kB,GAzFlBwB,IAAMC,W,iBCUZC,MAbf,WACE,OACE,6BACE,kBAAC,EAAD,MACA,yBAAKvC,UAAU,UACb,uBAAGwC,KAAK,6CACN,yBAAKnC,IAAKoC,IAAalC,IAAI,oBCCjBmC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLpC,QAAQoC,MAAMA,EAAMC,c","file":"static/js/main.cec48d12.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Player\":\"Player_Player__OA-Rr\",\"Gradient\":\"Player_Gradient__1p3ud\",\"SongName\":\"Player_SongName__LkAMi\",\"Btns\":\"Player_Btns__1q7D0\",\"btn\":\"Player_btn__2mOx2\",\"prev\":\"Player_prev__o6nXq\",\"main\":\"Player_main__3YFed\",\"next\":\"Player_next__3mVFQ\"};","module.exports = __webpack_public_path__ + \"static/media/pause.80e250eb.svg\";","module.exports = __webpack_public_path__ + \"static/media/play.061d845f.svg\";","module.exports = __webpack_public_path__ + \"static/media/Brianstorm.60c83159.mp3\";","module.exports = __webpack_public_path__ + \"static/media/TeddyPicker.78281cd8.mp3\";","module.exports = __webpack_public_path__ + \"static/media/prev.2cbac354.svg\";","module.exports = __webpack_public_path__ + \"static/media/next.d8914c90.svg\";","module.exports = __webpack_public_path__ + \"static/media/git.1bb02710.svg\";","import React from 'react';\r\nimport classes from './Player.module.scss';\r\nimport svg_pause from '../pause.svg';\r\nimport svg_play from '../play.svg';\r\n\r\nexport default props => {\r\n\tif (props.isPaused) {\r\n\t\tprops.audio.pause();\r\n\t} else {\r\n\t\tprops.audio.play();\r\n\t}\r\n\r\n\treturn (\r\n\t\t<div\r\n\t\t\tonClick={props.onClick}\r\n\t\t\tclassName={classes.btn + ' ' + classes.Paused + ' ' + classes.main}\r\n\t\t>\r\n\t\t\t{\r\n\t\t\t\tprops.isPaused ?\r\n\t\t\t\t\t<img src={svg_play} alt=\"#\"/> :\r\n\t\t\t\t\t<img src={svg_pause} alt=\"#\"/>\r\n\t\t\t}\r\n\t\t</div>\r\n\t);\r\n}\r\n","import React from 'react'\r\nimport classes from './Player.module.scss';\r\nimport Pause from './Pause.js';\r\nimport song1 from './songs/Brianstorm.mp3';\r\nimport song2 from './songs/TeddyPicker.mp3';\r\nimport svg_prev from '../prev.svg';\r\nimport svg_next from '../next.svg';\r\n\r\nclass Player extends React.Component {\r\n\tstate = {\r\n\t\tsong_names: ['Brianstorm', 'Teddy Picker'],\r\n\t\tsongs_durations: ['02:52','02:45'],\r\n\t\tsongIndex: 0,\r\n\t\tautoRepeat: false,\r\n\t\tisPaused: true,\r\n\t}\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\t\tthis.songs = [song1, song2];\r\n\r\n\t\tthis.audio = new Audio(this.songs[this.state.songIndex]);\r\n\t\t// this.audio.volume = .1;\r\n\t\tthis.audio.currentTime = 0;\r\n\r\n\t\tthis.audio.onended = ()=>{\r\n\t\t\tthis.audio.currentTime = 0;\r\n\t\t\t// this.state.isPaused = true;\r\n\t\t\tif (this.state.autoRepeat) {\r\n\t\t\t\tthis.audio.play();\r\n\t\t\t} else {\r\n\t\t\t\tthis.setState({isPaused: true});\r\n\t\t\t}\r\n\r\n\t\t\t// this.audio.play();\r\n\t\t\t// this.state.isPaused = !this.state.isPaused;\r\n\t\t\t// console.log(this.audio);\r\n\t\t};\r\n\t\tthis.audio.ontimeupdate = ()=>{\r\n\t\t\t// vm.generateTime();\r\n\t\t\t// console.log(this.audio);\r\n\t\t};\r\n\t}\r\n\r\n\t// 145.59989\r\n\t// 02:45\r\n\t// Converting 01:59 format to seconds only format\r\n\t// max_dur = +props.max_dur.slice(0, 2)*60 + +props.max_dur.slice(3, 5);\r\n\tcomponentDidUpdate() {\r\n\t\tconsole.log('Upd');\r\n\t}\r\n\tcomponentDidMount() {\r\n\t\tconsole.log('Mount');\r\n\t\t// for (var key in this.audio) {\r\n\t\t// \tif (typeof this.audio[key] === \"number\") {\r\n\t\t// \t\tconsole.log(key);\r\n\t\t// \t}\r\n\t\t// }\r\n\t}\r\n\r\n\taddIndex(songIndexOld) {\r\n\t\tthis.setState({songIndex: songIndexOld++})\r\n\t}\r\n\tremIndex(songIndexOld) {\r\n\t\tthis.setState({songIndex: songIndexOld--})\r\n\t}\r\n\tsetPause(isPausedOld) {\r\n\t\tthis.setState({isPaused: !isPausedOld})\r\n\t}\r\n\r\n\t// audio.currentTime = (maxduration * percentage) / 100;\r\n\r\n\trender(){\r\n\t\treturn (\r\n\t\t\t<div>\r\n\t\t\t\t<div className={classes.Player}></div>\r\n\t\t\t\t<div className={classes.Gradient}>\r\n\t\t\t\t\t<div className={classes.Btns}>\r\n\t\t\t\t\t\t<div className={classes.btn + ' ' + classes.prev}>\r\n\t\t\t\t\t\t\t<img src={svg_prev} alt=\"#\"/>\r\n\t\t\t\t\t\t</div>\r\n\r\n\r\n\t\t\t\t\t\t<Pause\r\n\t\t\t\t\t\t\t// max_dur={this.audio.duration}\r\n\t\t\t\t\t\t\tonClick={()=>this.setPause(this.state.isPaused)}\r\n\t\t\t\t\t\t\tisPaused={this.state.isPaused}\r\n\t\t\t\t\t\t\taudio={this.audio}\r\n\t\t\t\t\t\t\tclassName={classes.btn + ' ' + classes.Paused + ' ' + classes.main}\r\n\t\t\t\t\t\t/>\r\n\r\n\r\n\t\t\t\t\t\t<div className={classes.btn + ' ' + classes.next}>\r\n\t\t\t\t\t\t\t<img src={svg_next} alt=\"#\"/>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t\t<div className={classes.SongName}>\r\n\t\t\t\t\t{this.state.song_names[this.state.songIndex]}\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t);\r\n\t};\r\n}\r\n\r\nexport default Player;\r\n","import React from 'react';\nimport './App.scss';\nimport Player from './Components/Player.js';\nimport github_logo from './git.svg';\n\nfunction App() {\n  return (\n    <div>\n      <Player/>\n      <div className=\"github\">\n        <a href=\"https://github.com/maxim2817/simplePlayer\">\n          <img src={github_logo} alt=\"github_logo\"/>\n        </a>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}